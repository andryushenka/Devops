#!groovy

properties([disableConcurrentBuilds()])

pipeline {
    
    agent any
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '2', artifactNumToKeepStr: '2'))
        timestamps()
    }
    stages {
        stage("Build images") {
            steps {
                echo "============== start build images =================="   
                sh '''
                    if [ "$(docker images | grep "python_prod")" ]; then docker rmi --force python_prod:latest; fi
                    docker build -t python_prod:latest .              
                '''
            }
        }
        stage("Start or Restart docker container (port:4000)") {
            steps {
                echo "============== Start or Restart docker container ==================" 
                sh '''
                    if [ "$(docker ps -a | grep "python_prod")" ]; then docker stop python_prod; docker rm python_prod; fi
                    docker run -d --name python_prod -p 4000:4000 python_prod:latest
                '''
            }
        }
        stage("Backup") {
            steps {
                echo "============== Start backup ==================" 
                sh 'docker save -o ./python_prod.tar python_prod:latest'
                archiveArtifacts artifacts: 'python_prod.tar'
            }
        }
    }
}
